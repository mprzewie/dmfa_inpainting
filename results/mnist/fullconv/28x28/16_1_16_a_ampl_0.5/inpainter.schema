FullyConvolutionalInpainter(
  (extractor): Sequential(
    (0): Sequential(
      (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (2): Reshape(out_size=(-1, 3136))
    (3): ReLU()
    (4): Linear(in_features=3136, out_features=3136, bias=True)
    (5): ReLU()
    (6): Reshape(out_size=(-1, 16, 14, 14))
    (7): ConvTranspose2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (8): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (a_extractor): Sequential(
    (0): Conv2d(16, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Conv2d(8, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): Reshape(out_size=(-1, 1, 4, 784))
    (4): LambdaLayer()
  )
  (m_extractor): Sequential(
    (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(8, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): Reshape(out_size=(-1, 1, 784))
  )
  (d_extractor): Sequential(
    (0): Conv2d(16, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Reshape(out_size=(-1, 1, 784))
    (2): LambdaLayer()
  )
  (p_extractor): Sequential(
    (0): Conv2d(16, 1, kernel_size=(28, 28), stride=(1, 1))
    (1): Reshape(out_size=(-1, 1))
    (2): Softmax(dim=None)
  )
)
